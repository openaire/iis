<workflow-app xmlns="uri:oozie:workflow:0.4" name="importer_plaintext">

	<parameters>
		<property>
			<name>input</name>
			<description>text importer input directory</description>
		</property>
		<property>
			<name>max_file_size_mb</name>
			<value>$UNDEFINED$</value>
			<description>maximum allowed file size in Megabytes</description>
		</property>
        <property>
            <name>content_connection_timeout</name>
            <value>60000</value>
            <description>streaming content connection timeout (expressed in milliseconds)</description>
        </property>
        <property>
            <name>content_read_timeout</name>
            <value>60000</value>
            <description>streaming content read timeout (expressed in milliseconds)</description>
        </property>
		<property>
			<name>mapred_max_split_size</name>
			<value>100000</value>
			<description>maximum input data split size, required by streaming version reading DocumentContentUrl to split input data into more chunks</description>
		</property>
        <property>
            <name>plaintext_content_retriever_appmaster_memory_mb</name>
            <value>2048</value>
        </property>
        <!-- S3 related -->
        <property>
            <name>objectstore_s3_keystore_location</name>
            <value>$UNDEFINED$</value>
            <description>keystore holding credentials giving read access to S3 bucket with contents</description>
        </property>
        <property>
            <name>objectstore_s3_endpoint</name>
            <value>$UNDEFINED$</value>
            <description>S3 service providing contents endpoint</description>
        </property>
        <!--  -->
		<property>
			<name>output</name>
			<description>text importer output directory</description>
		</property>
        <property>
            <name>output_report_root_path</name>
            <description>base directory for storing reports</description>
        </property>
        <property>
            <name>output_report_relative_path</name>
            <value>import_content_plaintext</value>
            <description>directory for storing report (relative to output_report_root_path)</description>
        </property>
        <property>
            <name>report_properties_prefix</name>
            <value>import.content.plaintext</value>
            <description>prefix for reported properties</description>
        </property>
	</parameters>

    <global>
        <job-tracker>${jobTracker}</job-tracker>
        <name-node>${nameNode}</name-node>
        <configuration>
            <property>
                <name>mapreduce.job.queuename</name>
                <value>${importerQueueName}</value>
            </property>
            <property>
                <name>oozie.launcher.mapred.job.queue.name</name>
                <value>${oozieLauncherQueueName}</value>
            </property>
        </configuration>
    </global>
    
    
	<start to="generate-schema" />

	<action name="generate-schema">
		<java>
			<main-class>eu.dnetlib.iis.common.javamapreduce.hack.AvroSchemaGenerator</main-class>
			<arg>eu.dnetlib.iis.metadataextraction.schemas.DocumentText</arg>
			<arg>org.apache.avro.Schema.Type.NULL</arg>
			<capture-output />
		</java>
		<ok to="content-retriever" />
		<error to="fail" />
	</action>

	<action name="content-retriever">
		<map-reduce>
			<!-- The data generated by this node is deleted in this section -->
			<prepare>
				<delete path="${nameNode}${output}" />
			</prepare>
			<configuration>
                <property>
                    <name>yarn.app.mapreduce.am.resource.mb</name>
                    <value>${plaintext_content_retriever_appmaster_memory_mb}</value>
                </property>
                <!-- S3 content retrieval related -->
                <property>
                    <name>hadoop.security.credential.provider.path</name>
                    <value>${objectstore_s3_keystore_location}</value>
                </property>
                <property>
                    <name>import.content.object.store.s3.endpoint</name>
                    <value>${objectstore_s3_endpoint}</value>
                </property>
                <!--  -->
				<property>
					<name>mapreduce.job.inputformat.class</name>
					<value>org.apache.avro.mapreduce.AvroKeyInputFormat</value>
				</property>
				<!-- The output format seems to be required, JSON is written when missing -->
				<property>
					<name>mapreduce.job.outputformat.class</name>
					<value>org.apache.avro.mapreduce.AvroKeyOutputFormat</value>
				</property>
				<property>
					<name>mapreduce.map.output.key.class</name>
					<value>org.apache.avro.mapred.AvroKey</value>
				</property>
				<property>
					<name>mapreduce.map.output.value.class</name>
					<value>org.apache.avro.mapred.AvroValue</value>
				</property>
				<property>
					<name>mapreduce.job.output.key.class</name>
					<value>org.apache.avro.mapred.AvroKey</value>
				</property>
				<property>
					<name>mapreduce.job.output.value.class</name>
					<value>org.apache.avro.mapred.AvroValue</value>
				</property>
				<property>
					<name>mapreduce.job.output.key.comparator.class</name>
					<value>org.apache.avro.hadoop.io.AvroKeyComparator</value>
				</property>
				<property>
					<name>io.serializations</name>
					<value>org.apache.hadoop.io.serializer.WritableSerialization,org.apache.hadoop.io.serializer.avro.AvroSpecificSerialization,org.apache.hadoop.io.serializer.avro.AvroReflectSerialization,org.apache.avro.hadoop.io.AvroSerialization
					</value>
				</property>
				<property>
					<name>mapreduce.job.output.group.comparator.class</name>
					<value>org.apache.avro.hadoop.io.AvroKeyComparator</value>
				</property>

				<property>
					<name>rpc.engine.org.apache.hadoop.hdfs.protocolPB.ClientNamenodeProtocolPB
					</name>
					<value>org.apache.hadoop.ipc.ProtobufRpcEngine</value>
				</property>

				<!-- This is required for new api usage -->
				<property>
					<name>mapred.mapper.new-api</name>
					<value>true</value>
				</property>
				<property>
					<name>mapred.reducer.new-api</name>
					<value>true</value>
				</property>

				<!-- Standard stuff for our framework -->

				<property>
					<name>avro.serialization.key.reader.schema</name>
					<value>${wf:actionData('generate-schema')['eu.dnetlib.iis.metadataextraction.schemas.DocumentText']}</value>
				</property>
				<property>
					<name>avro.serialization.key.writer.schema</name>
					<value>${wf:actionData('generate-schema')['eu.dnetlib.iis.metadataextraction.schemas.DocumentText']}</value>
				</property>

				<property>
					<name>avro.serialization.value.reader.schema</name>
					<value>${wf:actionData('generate-schema')['org.apache.avro.Schema.Type.NULL']}</value>
				</property>
				<property>
					<name>avro.serialization.value.writer.schema</name>
					<value>${wf:actionData('generate-schema')['org.apache.avro.Schema.Type.NULL']}</value>
				</property>

				<property>
					<name>avro.schema.output.key</name>
					<value>${wf:actionData('generate-schema')['eu.dnetlib.iis.metadataextraction.schemas.DocumentText']}</value>
				</property>

				<property>
					<name>mapreduce.input.fileinputformat.inputdir</name>
					<value>${input}</value>
				</property>
				<property>
					<name>mapreduce.output.fileoutputformat.outputdir</name>
					<value>${output}</value>
				</property>
                <property>
                    <name>import.content.connection.timeout</name>
                   <value>${content_connection_timeout}</value>
                </property>
                <property>
                    <name>import.content.read.timeout</name>
                   <value>${content_read_timeout}</value>
                </property>
				<property>
					<name>import.content.max.file.size.mb</name>
					<value>${max_file_size_mb}</value>
				</property>
				<property>
					<name>mapreduce.input.fileinputformat.split.maxsize</name>
					<value>${mapred_max_split_size}</value>
				</property>
				<!-- disabling speculative run to be less invasive to ObjectStore -->
				<property>
					<name>mapreduce.map.speculative</name>
					<value>false</value>
				</property>
				<property>
					<name>mapreduce.job.map.class</name>
					<value>eu.dnetlib.iis.wf.importer.content.DocumentTextUrlBasedImporterMapper</value>
				</property>
				<property>
					<name>mapreduce.job.reduces</name>
					<value>0</value>
				</property>
                <property>
                    <name>oozie.action.external.stats.write</name>
                    <value>true</value>
                </property>
			</configuration>
		</map-reduce>
		<ok to="report" />
		<error to="fail" />
	</action>

    <action name="report">
        <java>
            <main-class>eu.dnetlib.iis.common.java.ProcessWrapper</main-class>
            <arg>eu.dnetlib.iis.common.report.ReportGenerator</arg>
            <arg>-Preport.${report_properties_prefix}.correct=${hadoop:counters('content-retriever')[RECORDS][MAP_OUT]}</arg>
            <arg>-Preport.${report_properties_prefix}.invalid.sizeExceeded=${hadoop:counters('content-retriever')['eu.dnetlib.iis.wf.importer.content.DocumentTextUrlBasedImporterMapper$InvalidRecordCounters']['SIZE_EXCEEDED']}</arg>
            <arg>-Preport.${report_properties_prefix}.invalid.sizeInvalid=${hadoop:counters('content-retriever')['eu.dnetlib.iis.wf.importer.content.DocumentTextUrlBasedImporterMapper$InvalidRecordCounters']['SIZE_INVALID']}</arg>
            <arg>-Preport.${report_properties_prefix}.invalid.unavailable=${hadoop:counters('content-retriever')['eu.dnetlib.iis.wf.importer.content.DocumentTextUrlBasedImporterMapper$InvalidRecordCounters']['UNAVAILABLE']}</arg>
            <arg>-Oreport=${output_report_root_path}/${output_report_relative_path}</arg>
        </java>
        <ok to="report-execution-times" />
        <error to="fail" />
    </action>
    
    <action name="report-execution-times">
        <java>
            <main-class>eu.dnetlib.iis.common.java.ProcessWrapper</main-class>
            <arg>eu.dnetlib.iis.common.report.OozieTimeReportGenerator</arg>
            <arg>-PjobId=${wf:id()}</arg>
            <arg>-PoozieServiceLoc=${oozieServiceLoc}</arg>
            <arg>-Preport.${report_properties_prefix}.duration=content-retriever</arg>
            <arg>-Oreport=${output_report_root_path}/${output_report_relative_path}-execution-times</arg>
        </java>
        <ok to="end" />
        <error to="fail" />
    </action>

	<kill name="fail">
		<message>Unfortunately, the process failed -- error message:
			[${wf:errorMessage(wf:lastErrorNode())}]
		</message>
	</kill>
	<end name="end" />
</workflow-app>
