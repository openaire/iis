<?xml version="1.0"?>
<!-- Note that documentation placed in comments in this file uses the
"markdown" syntax (along with its way of dividing text into sections). -->
<workflow-app xmlns="uri:oozie:workflow:0.4" name="referenceextraction_erasmus_main">
    
    <parameters>
        <property>
            <name>input_document_text</name>
            <description>input document text</description>
        </property>
        <property>
            <name>input_erasmus_db</name>
            <description>input database with erasmus resources</description>
        </property>
        <property>
            <name>output</name>
            <description>output document to erasmus resource</description>
        </property>
    </parameters>

    <global>
        <job-tracker>${jobTracker}</job-tracker>
        <name-node>${nameNode}</name-node>
        <configuration>
            <property>
                <name>mapreduce.job.queuename</name>
                <value>${queueName}</value>
            </property>
            <property>
                <name>oozie.launcher.mapred.job.queue.name</name>
                <value>${oozieLauncherQueueName}</value>
            </property>
        </configuration>
    </global>
    
    
    <start to="generate-schema" />

    <action name="generate-schema">
        <java>
            <main-class>eu.dnetlib.iis.common.javamapreduce.hack.AvroSchemaGenerator</main-class>
            <arg>eu.dnetlib.iis.metadataextraction.schemas.DocumentText</arg>
            <capture-output />
        </java>
        <ok to="main" />
        <error to="fail" />
    </action>

    <action name="main">
        <map-reduce>
            <prepare>
                <delete path="${nameNode}${output}"/>
            </prepare>
            <streaming>
                <mapper>scripts/madis/mexec.py -d erasmus.db -f scripts/erasmus.sql</mapper>
            </streaming>
            <configuration>
                <!-- # Standard settings for our framework -->
                <property>
                    <name>mapred.output.format.class</name>
                    <value>org.apache.hadoop.mapred.TextOutputFormat</value>
                </property>
                <property>
                    <name>mapred.input.format.class</name>
                    <value>com.cloudera.science.avro.streaming.AvroAsJSONInputFormat</value>
                </property>
                <!-- # Custom settings for this workflow node -->
                <!-- We do not use any reducers, so we set their number to 0 -->
                <property>
                    <name>mapreduce.job.reduces</name>
                    <value>0</value>
                </property>
                
                <!-- INPUT -->
                <property>
                    <name>mapreduce.input.fileinputformat.inputdir</name>
                    <value>${input_document_text}</value>
                </property>

                <property>
                    <name>input.schema.literal</name>
                    <value>${wf:actionData('generate-schema')['eu.dnetlib.iis.metadataextraction.schemas.DocumentText']}</value>
                </property>

                <!-- OUTPUT -->
                <property>
                    <name>mapreduce.output.fileoutputformat.outputdir</name>
                    <value>${output}</value>
                </property>          

                <!-- this one is requred due to the large amount of time taken 
                    by process storing plaintexts into the database -->
                <property>
                    <name>mapreduce.task.timeout</name>
                    <value>7200000</value>
                </property>
            </configuration>
            <file>${input_erasmus_db}#erasmus.db</file>
        </map-reduce>
        <ok to="end"/>
        <error to="fail"/>
    </action>

    <kill name="fail">
        <message>Unfortunately, the process failed -- error message:
                    [${wf:errorMessage(wf:lastErrorNode())}]
                </message>
    </kill>

    <end name="end"/>
</workflow-app>
