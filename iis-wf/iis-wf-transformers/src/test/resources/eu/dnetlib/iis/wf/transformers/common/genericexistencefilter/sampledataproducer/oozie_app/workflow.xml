<workflow-app xmlns="uri:oozie:workflow:0.4" name="test-genericexistencefilter_sampledataproducer">

    <global>
        <job-tracker>${jobTracker}</job-tracker>
        <name-node>${nameNode}</name-node>
        <configuration>
            <property>
                <name>mapreduce.job.queuename</name>
                <value>${queueName}</value>
            </property>
            <property>
                <name>oozie.launcher.mapred.job.queue.name</name>
                <value>${oozieLauncherQueueName}</value>
            </property>
        </configuration>
    </global>
    
    
    <start to="producer"/>
    <action name="producer">
        <java>
            <!-- The data generated by this node is deleted in this section -->
            <prepare>
                <delete path="${nameNode}${workingDir}/producer" />
                <mkdir path="${nameNode}${workingDir}/producer" />
            </prepare>
            <!-- This is simple wrapper for the Java code -->
            <main-class>eu.dnetlib.iis.common.java.ProcessWrapper</main-class>
            <!-- The business Java code that gets to be executed -->
			<arg>eu.dnetlib.iis.common.java.jsonworkflownodes.Producer</arg>
            <!-- Specification of the output ports -->
            <arg>-C{existent_id,
            eu.dnetlib.iis.common.schemas.Identifier,
            eu/dnetlib/iis/wf/transformers/common/genericexistencefilter/sampledataproducer/data/existent_id.json}</arg>
            <arg>-C{data,
            eu.dnetlib.iis.importer.auxiliary.schemas.DocumentContentUrl,
            eu/dnetlib/iis/wf/transformers/common/genericexistencefilter/sampledataproducer/data/data.json}</arg>
            <!-- All input and output ports have to be bound to paths in HDFS -->
            <arg>-Oexistent_id=${workingDir}/producer/existent_id</arg>
            <arg>-Odata=${workingDir}/producer/data</arg>
        </java>
        <ok to="genericexistencefilter"/>
        <error to="fail"/>
    </action>
    <action name="genericexistencefilter">
        <sub-workflow>
            <app-path>${wf:appPath()}/genericexistencefilter</app-path>
            <propagate-configuration/>
            <configuration>
                <!-- Input ports. -->
                <property>
                    <name>input</name>
                    <value>${workingDir}/producer/data</value>
                </property>
                <property>
                    <name>input_class_name</name>
                    <value>eu.dnetlib.iis.importer.auxiliary.schemas.DocumentContentUrl</value>
                </property>
                <property>
                    <name>input_existent_id</name>
                    <value>${workingDir}/producer/existent_id</value>
                </property>
                <property>
                    <name>input_id_field_name</name>
                    <value>id</value>
                </property>
                <!-- Output port bound to given path -->
                <property>
                    <name>output_matched</name>
                    <value>${workingDir}/genericexistencefilter/matched</value>
                </property>
                <property>
                    <name>output_unmatched</name>
                    <value>${workingDir}/genericexistencefilter/unmatched</value>
                </property>
                <!-- report related -->
                <property>
                    <name>output_report</name>
                    <value>${workingDir}/report</value>
                </property>
                <property>
                    <name>matched_records_counter_name</name>
                    <value>generic.existencefilter.matched.total</value>
                </property>
            </configuration>
        </sub-workflow>
        <ok to="consumer"/>
        <error to="fail"/>
    </action>
    
    <action name="consumer">
        <java>
            <!-- This is simple wrapper for the Java code -->
            <main-class>eu.dnetlib.iis.common.java.ProcessWrapper</main-class>
            <!-- The business Java code that gets to be executed -->
            <arg>eu.dnetlib.iis.common.java.jsonworkflownodes.TestingConsumer</arg>
            <!-- Specification of the input ports -->
            <arg>-C{matched,
                eu.dnetlib.iis.importer.auxiliary.schemas.DocumentContentUrl,
                eu/dnetlib/iis/wf/transformers/common/genericexistencefilter/sampledataproducer/data/matched.json}</arg>
            <arg>-C{unmatched,
                eu.dnetlib.iis.importer.auxiliary.schemas.DocumentContentUrl,
                eu/dnetlib/iis/wf/transformers/common/genericexistencefilter/sampledataproducer/data/unmatched.json}</arg>
            <arg>-C{report,
                eu.dnetlib.iis.common.schemas.ReportEntry,
                eu/dnetlib/iis/wf/transformers/common/genericexistencefilter/sampledataproducer/data/report.json}</arg>
            <!-- All input and output ports have to be bound to paths in HDFS -->
            <arg>-Imatched=${workingDir}/genericexistencefilter/matched</arg>
            <arg>-Iunmatched=${workingDir}/genericexistencefilter/unmatched</arg>
            <arg>-Ireport=${workingDir}/report</arg>
        </java>
        <ok to="end" />
        <error to="fail" />
    </action>
    <kill name="fail">
        <message>Unfortunately, the workflow failed -- error message:
            [${wf:errorMessage(wf:lastErrorNode())}]</message>
    </kill>
    <end name="end"/>
</workflow-app>