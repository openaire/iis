<workflow-app xmlns="uri:oozie:workflow:0.4" name="metadataextraction_cache_remover">
    <parameters>
        <property>
            <name>cache_location</name>
            <description>metadata extraction HDFS cache location. Directory with appropriate permisions has to be created in advance.</description>
        </property>
        <property>
            <name>zk_session_timeout</name>
            <value>60000</value>
            <description>zookeeper session timeout when handling locks (expressed in milliseconds)</description>
        </property>
        <property>
            <name>lock_managing_process</name>
            <value>eu.dnetlib.iis.common.lock.LockManagingProcess</value>
            <description>Lock managing process, to be overriden in integration tests</description>
        </property>
        <property>
            <name>input_existent_id</name>
            <description>datastore with checksums of records to be removed</description>
        </property>
        <property>
            <name>remove_sideproducts</name>
            <value>false</value>
            <description>flag indicating whole working directory will be erased</description>
        </property>
        <!-- working directory related -->
        <property>
            <name>execution_environment</name>
            <value>cache_remover</value>
            <description>execution environment used for workingDir creation</description>
        </property>
        <property>
            <name>workingDir</name>
            <value>/user/${user.name}/iis/working_dirs/${execution_environment}</value>
            <description>working directory</description>
        </property>
        <property>
            <name>reports_external_path</name>
            <value>$UNDEFINED$</value>
            <description>directory for storing reports from different executions of the workflow</description>
        </property>
    </parameters>

    <global>
        <job-tracker>${jobTracker}</job-tracker>
        <name-node>${nameNode}</name-node>
        <configuration>
            <property>
                <name>mapreduce.job.queuename</name>
                <value>${queueName}</value>
            </property>
            <property>
                <name>oozie.launcher.mapred.job.queue.name</name>
                <value>${oozieLauncherQueueName}</value>
            </property>
        </configuration>
    </global>
    
    <start to="init-workingDir" />

    <action name="init-workingDir">
        <fs>
            <delete path="${nameNode}${workingDir}" />
            <mkdir path="${nameNode}${workingDir}" />
        </fs>
        <ok to="copy-version" />
        <error to="fail" />
    </action>

    <action name="copy-version">
        <distcp xmlns="uri:oozie:distcp-action:0.2">
            <arg>${wf:appPath()}/version.properties</arg>
            <arg>${nameNode}${workingDir}</arg>
        </distcp>
        <ok to="get-existing-cache-id" />
        <error to="fail" />
    </action>
    
    <action name='get-existing-cache-id'>
        <java>
            <main-class>eu.dnetlib.iis.common.java.ProcessWrapper</main-class>
            <arg>eu.dnetlib.iis.common.cache.CacheMetadataManagingProcess</arg>
            <arg>-Pcache_location=${cache_location}</arg>
            <arg>-Pmode=read_current_id</arg>
            <capture-output />
        </java>
        <ok to="decision-is-cache-empty" />
        <error to="fail" />
    </action>
    
    <decision name="decision-is-cache-empty">
        <switch>
            <case to="create-empty-report">${wf:actionData('get-existing-cache-id')['cache_id'] eq "$UNDEFINED$"}</case>
            <default to="genericexistencefilter-on-cache-meta" />
        </switch>
    </decision>
    
    <action name="genericexistencefilter-on-cache-meta">
        <sub-workflow>
            <app-path>${wf:appPath()}/genericexistencefilter</app-path>
            <propagate-configuration/>
            <configuration>
                <property>
                    <name>input</name>
                    <value>${cache_location}/${wf:actionData('get-existing-cache-id')['cache_id']}/meta</value>
                </property>
                <property>
                    <name>input_class_name</name>
                    <value>eu.dnetlib.iis.metadataextraction.schemas.ExtractedDocumentMetadata</value>
                </property>
                <property>
                    <name>input_existent_id</name>
                    <value>${input_existent_id}</value>
                </property>
                <property>
                    <name>output_matched</name>
                    <value>${workingDir}/genericexistencefilter-meta/matched</value>
                </property>
                <property>
                    <name>output_unmatched</name>
                    <value>${workingDir}/genericexistencefilter-meta/unmatched</value>
                </property>
                <property>
                    <name>output_report</name>
                    <value>${workingDir}/report/existence_filter_meta</value>
                </property>
                <property>
                    <name>matched_records_counter_name</name>
                    <value>cache.remover.removed.total</value>
                </property>
            </configuration>
        </sub-workflow>
        <ok to="check-if-anything-to-be-removed"/>
        <error to="fail"/>
    </action>

    <action name="check-if-anything-to-be-removed">
        <java>
            <main-class>eu.dnetlib.iis.common.java.ProcessWrapper</main-class>
            <arg>eu.dnetlib.iis.common.utils.EmptyDatastoreVerifierProcess</arg>
            <arg>-Iinput=${workingDir}/genericexistencefilter-meta/matched</arg>
            <capture-output />
        </java>
        <ok to="decision-is-anything-to-be-removed" />
        <error to="fail" />
    </action>

    <decision name="decision-is-anything-to-be-removed">
        <switch>
            <case to="obtain-lock_for_merging">${wf:actionData('check-if-anything-to-be-removed')['isEmpty'] eq "false"}</case>
            <default to="create-empty-report" />
        </switch>
    </decision>

    <action name="obtain-lock_for_merging">
        <java>
            <main-class>eu.dnetlib.iis.common.java.ProcessWrapper</main-class>
            <arg>${lock_managing_process}</arg>
            <arg>-Pzk_session_timeout=${zk_session_timeout}</arg>
            <arg>-Pnode_id=${cache_location}</arg>
            <arg>-Pmode=obtain</arg>
        </java>
        <ok to="get-new-cache-id_for_merging" />
        <error to="release-lock-and-fail" />
    </action>

    <action name='get-new-cache-id_for_merging'>
        <java>
            <main-class>eu.dnetlib.iis.common.java.ProcessWrapper</main-class>
            <arg>eu.dnetlib.iis.common.cache.CacheMetadataManagingProcess</arg>
            <arg>-Pcache_location=${cache_location}</arg>
            <arg>-Pmode=generate_new_id</arg>
            <capture-output />
        </java>
        <ok to="prepare_cache_for_merging" />
        <error to="release-lock-and-fail" />
    </action>

    <action name="prepare_cache_for_merging">
        <fs>
            <mkdir path="${nameNode}${cache_location}/${wf:actionData('get-new-cache-id_for_merging')['cache_id']}" />
        </fs>
        <ok to="copy-unmatched-cache-meta" />
        <error to="release-lock-and-fail" />
    </action>
    
    <action name="copy-unmatched-cache-meta">
        <distcp xmlns="uri:oozie:distcp-action:0.2">
            <arg>${nameNode}${workingDir}/genericexistencefilter-meta/unmatched</arg>
            <arg>${nameNode}${cache_location}/${wf:actionData('get-new-cache-id_for_merging')['cache_id']}/meta</arg>
        </distcp>
        <ok to="genericexistencefilter-on-cache-fault" />
        <error to="fail-merge_cache-temp_files_cleanup" />
    </action>

    <action name="genericexistencefilter-on-cache-fault">
        <sub-workflow>
            <app-path>${wf:appPath()}/genericexistencefilter</app-path>
            <propagate-configuration/>
            <configuration>
                <!-- Input ports. -->
                <property>
                    <name>input</name>
                    <value>${cache_location}/${wf:actionData('get-existing-cache-id')['cache_id']}/fault</value>
                </property>
                <property>
                    <name>input_id_field_name</name>
                    <value>inputObjectId</value>
                </property>
                <property>
                    <name>input_class_name</name>
                    <value>eu.dnetlib.iis.audit.schemas.Fault</value>
                </property>
                <property>
                    <name>input_existent_id</name>
                    <value>${input_existent_id}</value>
                </property>
                <!-- Output port bound to given path -->
                <property>
                    <name>output_matched</name>
                    <value>${workingDir}/genericexistencefilter-fault/matched</value>
                </property>
                <property>
                    <name>output_unmatched</name>
                    <value>${cache_location}/${wf:actionData('get-new-cache-id_for_merging')['cache_id']}/fault</value>
                </property>
                <property>
                    <name>output_report</name>
                    <value>${workingDir}/report/existence_filter_fault</value>
                </property>
            </configuration>
        </sub-workflow>
        <ok to="write-new-cache-id_for_merging"/>
        <error to="fail-merge_cache-temp_files_cleanup"/>
    </action>

    <action name="fail-merge_cache-temp_files_cleanup">
        <fs>
            <delete path="${nameNode}${cache_location}/${wf:actionData('get-new-cache-id_for_merging')['cache_id']}" />
        </fs>
        <ok to="release-lock-and-fail" />
        <error to="release-lock-and-fail" />
    </action>
    
    <action name='write-new-cache-id_for_merging'>
        <java>
            <main-class>eu.dnetlib.iis.common.java.ProcessWrapper</main-class>
            <arg>eu.dnetlib.iis.common.cache.CacheMetadataManagingProcess</arg>
            <arg>-Pcache_location=${cache_location}</arg>
            <arg>-Pmode=write_id</arg>
            <arg>-Pid=${wf:actionData('get-new-cache-id_for_merging')['cache_id']}</arg>
            <capture-output />
        </java>
        <ok to="release-lock-and-finalize" />
        <error to="fail-merge_cache-temp_files_cleanup" />
    </action>
    
    <!-- lock releasing actions -->
    <action name="release-lock-and-fail">
        <java>
            <main-class>eu.dnetlib.iis.common.java.ProcessWrapper</main-class>
            <arg>${lock_managing_process}</arg>
            <arg>-Pzk_session_timeout=${zk_session_timeout}</arg>
            <arg>-Pnode_id=${cache_location}</arg>
            <arg>-Pmode=release</arg>
        </java>
        <ok to="fail" />
        <error to="fail" />
    </action>

    <action name="release-lock-and-finalize">
        <java>
            <main-class>eu.dnetlib.iis.common.java.ProcessWrapper</main-class>
            <arg>${lock_managing_process}</arg>
            <arg>-Pzk_session_timeout=${zk_session_timeout}</arg>
            <arg>-Pnode_id=${cache_location}</arg>
            <arg>-Pmode=release</arg>
        </java>
        <!--
        TODO: uncoment when generating report with the number of removed records
        <ok to="build-report" />
        -->
        <ok to="build-report" />
        <error to="fail" />
    </action>
    <!-- end of lock releasing actions -->

    <action name="create-empty-report">
        <fs>
            <mkdir path="${nameNode}${workingDir}/report" />
        </fs>
        <ok to="build-report"/>
        <error to="fail"/>
    </action>

    <action name="build-report">
        <sub-workflow>
            <app-path>${wf:appPath()}/report</app-path>
            <propagate-configuration />
            <configuration>
                <property>
                    <name>working_dir</name>
                    <value>${workingDir}/report/working_dir</value>
                </property>
                <property>
                    <name>input_partial_reports</name>
                    <value>${workingDir}/report</value>
                </property>
            </configuration>
        </sub-workflow>
        <ok to="finalize" />
        <error to="fail" />
    </action>

	<decision name="finalize">
		<switch>
			<case to="remove_sideproducts">${remove_sideproducts eq "true"}</case>
			<default to="end" />
		</switch>
	</decision>

	<action name="remove_sideproducts">
		<fs>
			<delete path="${nameNode}${workingDir}" />
		</fs>
		<ok to="end" />
		<error to="fail" />
	</action>

	<kill name="fail">
		<message>Unfortunately, the process failed -- error message:
			[${wf:errorMessage(wf:lastErrorNode())}]
		</message>
	</kill>
	<end name="end" />
</workflow-app>