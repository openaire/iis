<workflow-app xmlns="uri:oozie:workflow:0.4" name="test-metadataextraction_cache_chain_extraction_disabled">
	
    <global>
        <job-tracker>${jobTracker}</job-tracker>
        <name-node>${nameNode}</name-node>
        <configuration>
            <property>
                <name>mapreduce.job.queuename</name>
                <value>${queueName}</value>
            </property>
            <property>
                <name>oozie.launcher.mapred.job.queue.name</name>
                <value>${oozieLauncherQueueName}</value>
            </property>
            <property>
                <name>metadata_extractor_app_name</name>
                <value>../metadata_extractor_mock</value>
            </property>
            <property>
                <name>lock_managing_process</name>
                <value>eu.dnetlib.iis.wf.metadataextraction.LockManagingProcessMock</value>
            </property>
            <property>
                <name>cache_report_relative_path</name>
                <value>import_metadataextraction_cache</value>
            </property>
            <property>
                <name>cache_report_properties_prefix</name>
                <value>import.metadataExtraction</value>
            </property>
            <property>
                <name>output_name_meta</name>
                <value>meta</value>
            </property>
            <property>
                <name>output_name_fault</name>
                <value>fault</value>
            </property>
        </configuration>
    </global>


    <start to="producer"/>
    
    <action name="producer">
        <java>
            <!-- The data generated by this node is deleted in this section -->
            <prepare>
                <delete path="${nameNode}${workingDir}/producer" />
                <mkdir path="${nameNode}${workingDir}/producer" />
            </prepare>
            <!-- This is simple wrapper for the Java code -->
            <main-class>eu.dnetlib.iis.common.java.ProcessWrapper</main-class>
            <!-- The business Java code that gets to be executed -->
            <arg>eu.dnetlib.iis.common.java.jsonworkflownodes.Producer</arg>
            <!-- Specification of the output ports -->
            <arg>-C{content_url_1,
                eu.dnetlib.iis.importer.auxiliary.schemas.DocumentContentUrl,
                eu/dnetlib/iis/wf/metadataextraction/cache/chain/data/input/document_content_url_1.json}</arg>
            <arg>-C{content_url_2,
                eu.dnetlib.iis.importer.auxiliary.schemas.DocumentContentUrl,
                eu/dnetlib/iis/wf/metadataextraction/cache/chain/data/input/document_content_url_2.json}</arg>
            <arg>-C{content_url_1_2,
                eu.dnetlib.iis.importer.auxiliary.schemas.DocumentContentUrl,
                eu/dnetlib/iis/wf/metadataextraction/cache/chain/data/input/document_content_url_1_2.json}</arg>
            <!-- All input and output ports have to be bound to paths in HDFS -->
            <arg>-Ocontent_url_1=${workingDir}/producer/content_url_1</arg>
            <arg>-Ocontent_url_2=${workingDir}/producer/content_url_2</arg>
            <arg>-Ocontent_url_1_2=${workingDir}/producer/content_url_1_2</arg>
        </java>
        <ok to="cache_chain_1st_run" />
        <error to="fail" />
    </action>
    
    <action name="cache_chain_1st_run">
		<sub-workflow>
            <app-path>${wf:appPath()}/cache_chain</app-path>
            <propagate-configuration/>
            <configuration>
                <property>
                    <name>active_metadata_extraction</name>
                    <value>true</value>
                </property>
                <!-- metadataextraction_mock related parameters -->
                <property>
                    <name>input_fault_json_location</name>
                    <value>eu/dnetlib/iis/wf/metadataextraction/cache/data/mock/fault_1.json</value>
                </property>
                <property>
                    <name>input_meta_json_location</name>
                    <value>eu/dnetlib/iis/wf/metadataextraction/cache/data/mock/meta_1.json</value>
                </property>
                <property>
                    <name>input</name>
                    <value>${workingDir}/producer/content_url_1</value>
                </property>
                <property>
                    <name>workingDir</name>
                    <value>${workingDir}/cache_chain_1st/working_dir</value>
                </property>
				<property>
					<name>output_root</name>
					<value>${workingDir}/cache_chain_1st/out</value>
				</property>
                <property>
                    <name>output_report_root_path</name>
                    <value>${workingDir}/cache_chain_1st/report</value>
                </property>
                <property>
                    <name>cache_location</name>
                    <value>${workingDir}/cache</value>
                </property>
            </configuration>
        </sub-workflow>
		<ok to="cache_chain_2nd_run"/>
		<error to="fail" />
	</action>
    
    <action name="cache_chain_2nd_run">
        <sub-workflow>
            <app-path>${wf:appPath()}/cache_chain</app-path>
            <propagate-configuration/>
            <configuration>
                <property>
                    <name>active_metadata_extraction</name>
                    <value>false</value>
                </property>
                <property>
                    <name>input</name>
                    <value>${workingDir}/producer/content_url_2</value>
                </property>
                <property>
                    <name>workingDir</name>
                    <value>${workingDir}/cache_chain_2nd/working_dir</value>
                </property>
                <property>
                    <name>output_root</name>
                    <value>${workingDir}/cache_chain_2nd/out</value>
                </property>
                <property>
                    <name>output_report_root_path</name>
                    <value>${workingDir}/cache_chain_2nd/report</value>
                </property>
                <property>
                    <name>cache_location</name>
                    <value>${workingDir}/cache</value>
                </property>
            </configuration>
        </sub-workflow>
        <ok to="cache_chain_3rd_run"/>
        <error to="fail" />
    </action>
    
    <action name="cache_chain_3rd_run">
        <sub-workflow>
            <app-path>${wf:appPath()}/cache_chain</app-path>
            <propagate-configuration/>
            <configuration>
                <property>
                    <name>active_metadata_extraction</name>
                    <value>false</value>
                </property>
                <property>
                    <name>input</name>
                    <value>${workingDir}/producer/content_url_1_2</value>
                </property>
                <property>
                    <name>workingDir</name>
                    <value>${workingDir}/cache_chain_3rd/working_dir</value>
                </property>
                <property>
                    <name>output_root</name>
                    <value>${workingDir}/cache_chain_3rd/out</value>
                </property>
                <property>
                    <name>output_report_root_path</name>
                    <value>${workingDir}/cache_chain_3rd/report</value>
                </property>
                <property>
                    <name>cache_location</name>
                    <value>${workingDir}/cache</value>
                </property>
            </configuration>
        </sub-workflow>
        <ok to="get-cache-id"/>
        <error to="fail" />
    </action>
    
    <action name="get-cache-id">
        <java>
            <main-class>eu.dnetlib.iis.common.java.ProcessWrapper</main-class>
            <arg>eu.dnetlib.iis.common.cache.CacheMetadataManagingProcess</arg>
            <arg>-Pcache_location=${workingDir}/cache</arg>
            <arg>-Pmode=read_current_id</arg>
            <capture-output />
        </java>
        <ok to="consumer" />
        <error to="fail" />
    </action>
    
    <action name="consumer">
		<java>
			<!-- This is simple wrapper for the Java code -->
			<main-class>eu.dnetlib.iis.common.java.ProcessWrapper</main-class>
			<!-- The business Java code that gets to be executed -->
			<arg>eu.dnetlib.iis.common.java.jsonworkflownodes.TestingConsumer</arg>
			<!-- Specification of the input ports -->
            <arg>-C{meta_out_1st,
                eu.dnetlib.iis.metadataextraction.schemas.ExtractedDocumentMetadata,
                eu/dnetlib/iis/wf/metadataextraction/cache/data/mock/meta_1.json}</arg>
            <arg>-C{fault_out_1st,
            eu.dnetlib.iis.audit.schemas.Fault,
                eu/dnetlib/iis/wf/metadataextraction/cache/data/mock/fault_1.json}</arg>
            <!-- no reports for 1st run since cache was initialized and metadataextractor module was mocked -->

            <arg>-C{meta_out_2nd,
                eu.dnetlib.iis.metadataextraction.schemas.ExtractedDocumentMetadata,
                eu/dnetlib/iis/common/data/empty.json}</arg>
            <arg>-C{fault_out_2nd,
            eu.dnetlib.iis.audit.schemas.Fault,
                eu/dnetlib/iis/common/data/empty.json}</arg>
            <arg>-C{report_2nd,
                eu.dnetlib.iis.common.schemas.ReportEntry,
                eu/dnetlib/iis/wf/metadataextraction/cache/data/output/report_empty.json}</arg>
            
            <arg>-C{meta_out_3rd,
                eu.dnetlib.iis.metadataextraction.schemas.ExtractedDocumentMetadata,
                eu/dnetlib/iis/common/data/empty.json}</arg>
            <!-- notice: fault was persisted in previous run therefore it is not expected to be returned -->
            <arg>-C{fault_out_3rd,
            eu.dnetlib.iis.audit.schemas.Fault,
                eu/dnetlib/iis/common/data/empty.json}</arg>
            <arg>-C{report_3rd,
                eu.dnetlib.iis.common.schemas.ReportEntry,
                eu/dnetlib/iis/wf/metadataextraction/cache/data/output/report_empty.json}</arg>

            <arg>-C{meta_cache,
                eu.dnetlib.iis.metadataextraction.schemas.ExtractedDocumentMetadata,
                eu/dnetlib/iis/wf/metadataextraction/cache/data/mock/meta_1.json}</arg>
            <arg>-C{fault_cache,
            eu.dnetlib.iis.audit.schemas.Fault,
                eu/dnetlib/iis/wf/metadataextraction/cache/data/mock/fault_1.json}</arg>

            <arg>-Imeta_out_1st=${workingDir}/cache_chain_1st/out/meta</arg>
            <arg>-Ifault_out_1st=${workingDir}/cache_chain_1st/out/fault</arg>
            
            <arg>-Imeta_out_2nd=${workingDir}/cache_chain_2nd/out/meta</arg>
            <arg>-Ifault_out_2nd=${workingDir}/cache_chain_2nd/out/fault</arg>
            <arg>-Ireport_2nd=${workingDir}/cache_chain_2nd/report/import_metadataextraction_cache</arg>
            
            <arg>-Imeta_out_3rd=${workingDir}/cache_chain_3rd/out/meta</arg>
            <arg>-Ifault_out_3rd=${workingDir}/cache_chain_3rd/out/fault</arg>
            <arg>-Ireport_3rd=${workingDir}/cache_chain_3rd/report/import_metadataextraction_cache</arg>
            
            <arg>-Imeta_cache=${workingDir}/cache/${wf:actionData('get-cache-id')['cache_id']}/meta</arg>
            <arg>-Ifault_cache=${workingDir}/cache/${wf:actionData('get-cache-id')['cache_id']}/fault</arg>
		</java>
		<ok to="end" />
		<error to="fail" />
	</action>
    
    <kill name="fail">
        <message>Unfortunately, the process failed -- error message: [${wf:errorMessage(wf:lastErrorNode())}]</message>
    </kill>
    <end name="end"/>
</workflow-app>